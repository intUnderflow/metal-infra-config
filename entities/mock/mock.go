// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/intunderflow/metal-infra-config/entities (interfaces: Config,SyncSession)
//
// Generated by this command:
//
//	mockgen -destination entities/mock/mock.go github.com/intunderflow/metal-infra-config/entities Config,SyncSession
//

// Package mock_entities is a generated GoMock package.
package mock_entities

import (
	reflect "reflect"

	entities "github.com/intunderflow/metal-infra-config/entities"
	proto "github.com/intunderflow/metal-infra-config/proto"
	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockConfig) Delete(arg0 entities.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockConfigMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockConfig)(nil).Delete), arg0)
}

// GetWithVersion mocks base method.
func (m *MockConfig) GetWithVersion(arg0 entities.Key) (entities.ValueWithVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithVersion", arg0)
	ret0, _ := ret[0].(entities.ValueWithVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithVersion indicates an expected call of GetWithVersion.
func (mr *MockConfigMockRecorder) GetWithVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithVersion", reflect.TypeOf((*MockConfig)(nil).GetWithVersion), arg0)
}

// List mocks base method.
func (m *MockConfig) List() map[entities.Key]entities.ValueWithVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[entities.Key]entities.ValueWithVersion)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockConfigMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConfig)(nil).List))
}

// SetWithVersion mocks base method.
func (m *MockConfig) SetWithVersion(arg0 entities.Key, arg1 string, arg2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithVersion indicates an expected call of SetWithVersion.
func (mr *MockConfigMockRecorder) SetWithVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithVersion", reflect.TypeOf((*MockConfig)(nil).SetWithVersion), arg0, arg1, arg2)
}

// Sync mocks base method.
func (m *MockConfig) Sync(arg0 entities.SyncSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockConfigMockRecorder) Sync(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockConfig)(nil).Sync), arg0)
}

// MockSyncSession is a mock of SyncSession interface.
type MockSyncSession struct {
	ctrl     *gomock.Controller
	recorder *MockSyncSessionMockRecorder
}

// MockSyncSessionMockRecorder is the mock recorder for MockSyncSession.
type MockSyncSessionMockRecorder struct {
	mock *MockSyncSession
}

// NewMockSyncSession creates a new mock instance.
func NewMockSyncSession(ctrl *gomock.Controller) *MockSyncSession {
	mock := &MockSyncSession{ctrl: ctrl}
	mock.recorder = &MockSyncSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncSession) EXPECT() *MockSyncSessionMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockSyncSession) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockSyncSessionMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSyncSession)(nil).CloseSend))
}

// Recv mocks base method.
func (m *MockSyncSession) Recv() (*proto.SyncRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.SyncRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockSyncSessionMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSyncSession)(nil).Recv))
}

// Send mocks base method.
func (m *MockSyncSession) Send(arg0 *proto.SyncRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSyncSessionMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSyncSession)(nil).Send), arg0)
}
