// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: metalinfraconfig.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetalInfraConfig_Set_FullMethodName  = "/proto.MetalInfraConfig/Set"
	MetalInfraConfig_Sync_FullMethodName = "/proto.MetalInfraConfig/Sync"
)

// MetalInfraConfigClient is the client API for MetalInfraConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetalInfraConfigClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (MetalInfraConfig_SyncClient, error)
}

type metalInfraConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewMetalInfraConfigClient(cc grpc.ClientConnInterface) MetalInfraConfigClient {
	return &metalInfraConfigClient{cc}
}

func (c *metalInfraConfigClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, MetalInfraConfig_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metalInfraConfigClient) Sync(ctx context.Context, opts ...grpc.CallOption) (MetalInfraConfig_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetalInfraConfig_ServiceDesc.Streams[0], MetalInfraConfig_Sync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metalInfraConfigSyncClient{stream}
	return x, nil
}

type MetalInfraConfig_SyncClient interface {
	Send(*SyncRecord) error
	Recv() (*SyncRecord, error)
	grpc.ClientStream
}

type metalInfraConfigSyncClient struct {
	grpc.ClientStream
}

func (x *metalInfraConfigSyncClient) Send(m *SyncRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metalInfraConfigSyncClient) Recv() (*SyncRecord, error) {
	m := new(SyncRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetalInfraConfigServer is the server API for MetalInfraConfig service.
// All implementations must embed UnimplementedMetalInfraConfigServer
// for forward compatibility
type MetalInfraConfigServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Sync(MetalInfraConfig_SyncServer) error
	mustEmbedUnimplementedMetalInfraConfigServer()
}

// UnimplementedMetalInfraConfigServer must be embedded to have forward compatible implementations.
type UnimplementedMetalInfraConfigServer struct {
}

func (UnimplementedMetalInfraConfigServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMetalInfraConfigServer) Sync(MetalInfraConfig_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedMetalInfraConfigServer) mustEmbedUnimplementedMetalInfraConfigServer() {}

// UnsafeMetalInfraConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetalInfraConfigServer will
// result in compilation errors.
type UnsafeMetalInfraConfigServer interface {
	mustEmbedUnimplementedMetalInfraConfigServer()
}

func RegisterMetalInfraConfigServer(s grpc.ServiceRegistrar, srv MetalInfraConfigServer) {
	s.RegisterService(&MetalInfraConfig_ServiceDesc, srv)
}

func _MetalInfraConfig_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetalInfraConfigServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetalInfraConfig_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetalInfraConfigServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetalInfraConfig_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetalInfraConfigServer).Sync(&metalInfraConfigSyncServer{stream})
}

type MetalInfraConfig_SyncServer interface {
	Send(*SyncRecord) error
	Recv() (*SyncRecord, error)
	grpc.ServerStream
}

type metalInfraConfigSyncServer struct {
	grpc.ServerStream
}

func (x *metalInfraConfigSyncServer) Send(m *SyncRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metalInfraConfigSyncServer) Recv() (*SyncRecord, error) {
	m := new(SyncRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetalInfraConfig_ServiceDesc is the grpc.ServiceDesc for MetalInfraConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetalInfraConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetalInfraConfig",
	HandlerType: (*MetalInfraConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _MetalInfraConfig_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _MetalInfraConfig_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metalinfraconfig.proto",
}
